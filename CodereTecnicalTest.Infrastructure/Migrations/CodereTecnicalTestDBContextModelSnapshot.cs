// <auto-generated />
using System;
using CodereTecnicalTest.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodereTecnicalTest.Infrastructure.Migrations
{
    [DbContext(typeof(CodereTecnicalTestDBContext))]
    partial class CodereTecnicalTestDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Externals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("imdb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("thetvdb")
                        .HasColumnType("int");

                    b.Property<int?>("tvrage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("medium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Links", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("previousepisodeid")
                        .HasColumnType("int");

                    b.Property<int>("selfid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("previousepisodeid");

                    b.HasIndex("selfid");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Network", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("officialSite")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("officialSite");

                    b.HasKey("id");

                    b.HasIndex("countryid");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Previousepisode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Previousepisodes");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("average")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("days")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Self", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Selves");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Show", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("_linksid")
                        .HasColumnType("int");

                    b.Property<int?>("averageRuntime")
                        .HasColumnType("int")
                        .HasColumnName("averageRuntime");

                    b.Property<int?>("dvdCountryid")
                        .HasColumnType("int");

                    b.Property<string>("ended")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ended");

                    b.Property<int>("externalsid")
                        .HasColumnType("int");

                    b.Property<int?>("imageid")
                        .HasColumnType("int");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("language");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("networkid")
                        .HasColumnType("int");

                    b.Property<string>("officialSite")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("officialSite");

                    b.Property<string>("premiered")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("premiered");

                    b.Property<int>("ratingid")
                        .HasColumnType("int");

                    b.Property<int?>("runtime")
                        .HasColumnType("int")
                        .HasColumnName("runtime");

                    b.Property<int>("scheduleid")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("updated")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<int?>("webChannelid")
                        .HasColumnType("int");

                    b.Property<int>("weight")
                        .HasColumnType("int")
                        .HasColumnName("weight");

                    b.HasKey("id");

                    b.HasIndex("_linksid");

                    b.HasIndex("dvdCountryid");

                    b.HasIndex("externalsid");

                    b.HasIndex("imageid");

                    b.HasIndex("networkid");

                    b.HasIndex("ratingid");

                    b.HasIndex("scheduleid");

                    b.HasIndex("webChannelid");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.Property<int>("genresid")
                        .HasColumnType("int");

                    b.Property<int>("showsid")
                        .HasColumnType("int");

                    b.HasKey("genresid", "showsid");

                    b.HasIndex("showsid");

                    b.ToTable("GenreShow");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Links", b =>
                {
                    b.HasOne("CodereTecnicalTest.Domain.Entities.Previousepisode", "previousepisode")
                        .WithMany()
                        .HasForeignKey("previousepisodeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Self", "self")
                        .WithMany()
                        .HasForeignKey("selfid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("previousepisode");

                    b.Navigation("self");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Network", b =>
                {
                    b.HasOne("CodereTecnicalTest.Domain.Entities.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid");

                    b.Navigation("country");
                });

            modelBuilder.Entity("CodereTecnicalTest.Domain.Entities.Show", b =>
                {
                    b.HasOne("CodereTecnicalTest.Domain.Entities.Links", "_links")
                        .WithMany()
                        .HasForeignKey("_linksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Country", "dvdCountry")
                        .WithMany()
                        .HasForeignKey("dvdCountryid");

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Externals", "externals")
                        .WithMany()
                        .HasForeignKey("externalsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageid");

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Network", "network")
                        .WithMany()
                        .HasForeignKey("networkid");

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Rating", "rating")
                        .WithMany()
                        .HasForeignKey("ratingid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Schedule", "schedule")
                        .WithMany()
                        .HasForeignKey("scheduleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Network", "webChannel")
                        .WithMany()
                        .HasForeignKey("webChannelid");

                    b.Navigation("_links");

                    b.Navigation("dvdCountry");

                    b.Navigation("externals");

                    b.Navigation("image");

                    b.Navigation("network");

                    b.Navigation("rating");

                    b.Navigation("schedule");

                    b.Navigation("webChannel");
                });

            modelBuilder.Entity("GenreShow", b =>
                {
                    b.HasOne("CodereTecnicalTest.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("genresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodereTecnicalTest.Domain.Entities.Show", null)
                        .WithMany()
                        .HasForeignKey("showsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
